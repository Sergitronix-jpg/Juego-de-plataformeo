import pygame
import random
import time

# Initialize Pygame
pygame.init()

# Screen setup
WIDTH, HEIGHT = 1920, 1080
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Sonic en Pygame")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 223, 0)
RED = (255, 0, 0)
BROWN = (139, 69, 19)
GREEN = (0, 255, 0)

# Player properties
player_size = (40, 40)
player_speed = 7
gravity = 0.5
jump_strength = -15
velocity_y = 0
on_ground = False
alive = True
jump_count = 0
is_ducking = False
player_x, player_y = 100, HEIGHT - player_size[1] - 10

# More platforms
platforms = [
    pygame.Rect(0, HEIGHT - 50, 2000, 50),  # Ground
    pygame.Rect(300, HEIGHT - 200, 250, 20),
    pygame.Rect(600, HEIGHT - 300, 300, 20),
    pygame.Rect(950, HEIGHT - 400, 250, 20),
    pygame.Rect(1300, HEIGHT - 500, 300, 20),
    pygame.Rect(1700, HEIGHT - 350, 250, 20),
    pygame.Rect(2000, HEIGHT - 250, 300, 20),
]

# Enemies
enemy_size = (40, 40)
enemies = [
    pygame.Rect(random.randint(400, 1800), p.top - enemy_size[1], *enemy_size)
    for p in platforms[1:]
]
enemy_speeds = [random.choice([-2, 2]) for _ in enemies]


# Simple textures (you can replace these with actual image files)
def load_textures():
    # Player texture (simplified Sonic sprite)
    player_texture = pygame.Surface(player_size)
    player_texture.fill(BLUE)
    pygame.draw.circle(player_texture, WHITE, (15, 15), 5)
    pygame.draw.circle(player_texture, WHITE, (25, 15), 5)

    # Platform texture
    platform_texture = pygame.Surface((50, 50))
    platform_texture.fill(BROWN)
    pygame.draw.rect(platform_texture, (150, 100, 50), (0, 0, 50, 50), 2)

    # Enemy texture
    enemy_texture = pygame.Surface(enemy_size)
    enemy_texture.fill(RED)
    pygame.draw.circle(enemy_texture, BLACK, (20, 20), 10)

    # Coin texture
    coin_texture = pygame.Surface((20, 20))
    coin_texture.fill(YELLOW)
    pygame.draw.circle(coin_texture, (255, 255, 100), (10, 10), 8)

    return player_texture, platform_texture, enemy_texture, coin_texture


player_texture, platform_texture, enemy_texture, coin_texture = load_textures()


# Hitbox adjustment
def get_player_hitbox(x, y, ducking):
    if ducking:
        return pygame.Rect(x + 10, y + 20, 20, 20)  # Smaller hitbox when ducking
    return pygame.Rect(x + 5, y + 5, 30, 30)  # Normal hitbox


# Coin generation
def generate_coins(num_coins):
    coins = []
    for _ in range(num_coins):
        while True:
            coin_x = random.randint(100, 1800)
            coin_y = random.choice([p.top - 30 for p in platforms])
            new_coin = pygame.Rect(coin_x, coin_y, 20, 20)
            if all(not new_coin.colliderect(c) for c in coins) and \
                    all(not new_coin.colliderect(p) for p in platforms) and \
                    all(not new_coin.colliderect(e) for e in enemies):
                coins.append(new_coin)
                break
    return coins


# Menu functions
def show_start_menu():
    font = pygame.font.SysFont('Arial', 50)
    screen.fill(WHITE)
    title = font.render('Sonic en Pygame', True, BLACK)
    start_text = font.render('Presiona ENTER para comenzar', True, BLACK)
    exit_text = font.render('Presiona ESC para salir', True, BLACK)
    screen.blit(title, (WIDTH // 2 - title.get_width() // 2, HEIGHT // 4))
    screen.blit(start_text, (WIDTH // 2 - start_text.get_width() // 2, HEIGHT // 2))
    screen.blit(exit_text, (WIDTH // 2 - exit_text.get_width() // 2, HEIGHT // 2 + 100))
    pygame.display.flip()


def show_victory_screen(time_taken, stars, collected_coins, total_coins):
    font = pygame.font.SysFont('Arial', 50)
    screen.fill(WHITE)
    victory_text = font.render('Â¡Has ganado!', True, BLACK)
    stats_text = font.render(f'Estrellas: {stars} | Monedas: {collected_coins}/{total_coins}', True, BLACK)
    time_text = font.render(f'Tiempo: {time_taken:.2f} segundos', True, BLACK)
    options = [
        font.render('1 - Siguiente nivel', True, BLACK),
        font.render('2 - Repetir nivel', True, BLACK),
        font.render('ESC - Salir', True, BLACK)
    ]

    screen.blit(victory_text, (WIDTH // 2 - victory_text.get_width() // 2, HEIGHT // 4))
    screen.blit(stats_text, (WIDTH // 2 - stats_text.get_width() // 2, HEIGHT // 2 - 60))
    screen.blit(time_text, (WIDTH // 2 - time_text.get_width() // 2, HEIGHT // 2))
    for i, text in enumerate(options):
        screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 2 + 60 + i * 60))
    pygame.display.flip()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return 'quit'
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_1:
                    return 'next'
                if event.key == pygame.K_2:
                    return 'repeat'
                if event.key == pygame.K_ESCAPE:
                    return 'quit'
    return 'quit'


# Reset level
def reset_level():
    global player_x, player_y, velocity_y, jump_count, alive, collected_coins, coins, start_time, enemies, enemy_speeds
    player_x, player_y = 100, HEIGHT - player_size[1] - 10
    velocity_y = 0
    jump_count = 0
    alive = True
    collected_coins = 0
    coins = generate_coins(10)
    start_time = time.time()
    for i, enemy in enumerate(enemies):
        enemy.x = random.randint(400, 1800)
        enemy.y = random.choice([p.top - enemy_size[1] for p in platforms[1:]])
        enemy_speeds[i] = random.choice([-2, 2])


# Game loop
running = True
game_started = False
game_state = 'menu'
clock = pygame.time.Clock()
coins = generate_coins(10)
collected_coins = 0
total_coins = len(coins)
start_time = time.time()

while running:
    if game_state == 'menu':
        show_start_menu()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    game_state = 'playing'
                    start_time = time.time()
                if event.key == pygame.K_ESCAPE:
                    running = False

    elif game_state == 'playing':
        screen.fill(WHITE)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        if alive:
            # Player movement
            keys = pygame.key.get_pressed()
            if keys[pygame.K_LEFT] and player_x > 0:
                player_x -= player_speed
            if keys[pygame.K_RIGHT] and player_x < WIDTH - 40:
                player_x += player_speed
            if keys[pygame.K_SPACE] and jump_count == 0:
                velocity_y = jump_strength
                on_ground = False
                jump_count = 1
            if keys[pygame.K_UP] and jump_count == 1:
                velocity_y = jump_strength
                jump_count = 2
            is_ducking = keys[pygame.K_DOWN]

            # Physics
            velocity_y += gravity
            player_y += velocity_y
            player_hitbox = get_player_hitbox(player_x, player_y, is_ducking)

            # Platform collision
            on_ground = False
            for platform in platforms:
                if player_hitbox.colliderect(platform) and velocity_y > 0 and not is_ducking:
                    player_y = platform.top - player_size[1]
                    velocity_y = 0
                    on_ground = True
                    jump_count = 0

            # Coin collection
            for coin in coins[:]:
                if player_hitbox.colliderect(coin):
                    coins.remove(coin)
                    collected_coins += 1

            # Enemy collision and movement
            for i, enemy in enumerate(enemies):
                enemy.x += enemy_speeds[i]
                if enemy.left <= 0 or enemy.right >= WIDTH:
                    enemy_speeds[i] *= -1
                if player_hitbox.colliderect(enemy):
                    alive = False

            # Victory condition
            if len(coins) == 0:
                end_time = time.time() - start_time
                stars = 3 if end_time < 60 else 2 if end_time < 120 else 1
                result = show_victory_screen(end_time, stars, collected_coins, total_coins)
                if result == 'next':
                    reset_level()  # Could be modified for next level
                elif result == 'repeat':
                    reset_level()
                elif result == 'quit':
                    running = False
                game_state = 'menu'

        # Drawing
        for platform in platforms:
            screen.blit(platform_texture, (platform.x, platform.y))
        screen.blit(player_texture, (player_x, player_y))
        for coin in coins:
            screen.blit(coin_texture, (coin.x, coin.y))
        for enemy in enemies:
            screen.blit(enemy_texture, (enemy.x, enemy.y))

        # HUD
        font = pygame.font.SysFont('Arial', 30)
        time_text = font.render(f'Tiempo: {time.time() - start_time:.2f}s', True, BLACK)
        coin_text = font.render(f'Monedas: {collected_coins}/{total_coins}', True, BLACK)
        screen.blit(time_text, (10, 10))
        screen.blit(coin_text, (10, 40))

        pygame.display.update()
        clock.tick(60)

pygame.quit()
